var path = require('path')
, fs = require('fs');
var os = require('os');
var 	querystring = require("querystring");

function fileAppender(file){
	var guidang_flag=getDay();
	var name =file;
	var format_file=getFilename(name);
    format_file = path.normalize(format_file);
	//创建打开文件
    function openTheStream(){
        var stream = fs.createWriteStream(format_file, {   //创建 一个文件输出流
            flags: 'a',
            mode: 0644,
            encoding: 'utf8'
        });
        stream.on("open", function(){
            canWrite = true;
            flushBuffer();  //内存中的日志清空
        });
        stream.on("error", function(err){
            console.error("log4js.fileAppender - Writing to file %s, error happened ", file, err);
        });
        stream.on("drain", function(){//当内核缓冲区清空之后调用次事件。nodejs的特点事件驱动
        	//console.log('drain');
            canWrite = true;
            flushBuffer();				
        });
        return stream;
    }
    
    function flushBuffer(){
        while (logEventBuffer.length > 0 && canWrite) {
            writeToLog(logEventBuffer.shift());
        }
    }
    
    var logEventBuffer = []		//需要记录的日志对象数组
	, canWrite = false
	, logFile = openTheStream();
    
    //close the file on process exit. 进	程一结束，关掉文件
    process.on('exit', function(){
        flushBuffer();
        logFile.end();
        logFile.destroy();
    });
    
	
    function writeToLog(log){
		var msg = formatLogMsg(log);
        canWrite = logFile.write(msg, "utf8"); //logFile 一个文件输出流对象,将字符传按照指定格式写道内核缓冲区中去
		//日志按天归档
		var current_flag=getDay();
		if(guidang_flag !=current_flag ){
			guidang_flag=current_flag;//修改归档标志日期
			var newfile=getFilename(name);
    		file = path.normalize(newfile);
            var newLogFileFD = fs.openSync(file, 'a', 0644), //同步打开一个新文件
			oldLogFileFD = logFile.fd;
        	logFile.fd = newLogFileFD;
        	fs.close(oldLogFileFD);			//关闭老的文件
		}
    }
	
	function getFilename(name){
		return name  + "_" + os.hostname() + "_" + getDay()+ ".log"
	}
	
	function formatLogMsg(log){
		//return log.serverName + "{"+querystring.stringify(log,';')+"}"+ "\n";
  	 	// return [log.serverName + "{_time='" + getTime() + "',_name='" + os.hostname() + "'," + querystring.stringify(log.msg,',') + "}"] + "\n";
	  return [log.serverName + "{_time='" + getTime() + "',_name='" + os.hostname() + "'" + log.msg + "}"] + "\n";
	}
    
	function getTime(){
	    var t = new Date();
	    return [t.getFullYear(), '-', add0(t.getMonth() + 1), '-', add0(t.getDate()), ' ', add0(t.getHours()), ':', add0(t.getMinutes()), ':', add0(t.getSeconds())].join('');
	}
	
	function getDay(){
	    var t = new Date();
	    return [t.getFullYear(), '-', add0(t.getMonth() + 1), '-', add0(t.getDate())].join('');
	    
	}
	
	function add0(num){
	    return num > 9 ? num : '0' + num;
	}

	//返回一个函数，闭包
    return function(log){
        logEventBuffer.push(log);
        flushBuffer();
    };
}


exports.name = "file";
exports.appender = fileAppender;
