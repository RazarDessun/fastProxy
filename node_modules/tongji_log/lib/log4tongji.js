var events = require('events')
, fs = require('fs')
, path = require('path')
, util = require('util')
, appenders = {}
, loggers = {}
 var appenderModule = require('./file');

//获取一个logger对象
function getLogger(logname){
    if (!loggers[logname]) {
        //如果没有创建一个logger，如果有直接获取一个logger
        loggers[logname] = new Logger(logname);
        if (appenders[logname]) {		//有针对该logger的appender
            appender = appenders[logname];
            loggers[logname].addListener("log", appender);
        }
    }
    return loggers[logname];
}
//添加一个appender
function addAppender(appender, name){
    appenders[name] = appender;
    if (loggers[name]) {
        loggers[name].addListener("log", appender);
    }
}
//清空appender
function clearAppenders (name) {
	delete appenders[name];
   // appenders = {};							//appenders清空
    for (var logger in loggers) {			
        if (loggers.hasOwnProperty(logger)) {
            loggers[logger].removeAllListeners("log");
        }
    }
	delete loggers[name];
}

function Logger(name){
    this.name = name;
}
util.inherits(Logger, events.EventEmitter);

Logger.prototype.log = function(msg){
    this.emit("log", msg); //触发log事件。把要记录的信息作为参数传递
};
Logger.prototype.info = function(msg){
    Logger.prototype.log.call(this, msg);
};
module.exports = {
    getLogger: getLogger,
    addAppender: addAppender,
    appenders: {},
};

module.exports.fileAppender = appenderModule.appender;
