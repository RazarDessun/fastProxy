//
// Autogenerated by Thrift Compiler (0.8.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var Thrift = require('thrift').Thrift;

var ttypes = require('./QueryThriftService_types');
//HELPER FUNCTIONS AND STRUCTURES

var QueryThriftService_findCateCondListService_args = function(args) {
  this.params = null;
  if (args) {
    if (args.params !== undefined) {
      this.params = args.params;
    }
  }
};
QueryThriftService_findCateCondListService_args.prototype = {};
QueryThriftService_findCateCondListService_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.params = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

QueryThriftService_findCateCondListService_args.prototype.write = function(output) {
  output.writeStructBegin('QueryThriftService_findCateCondListService_args');
  if (this.params) {
    output.writeFieldBegin('params', Thrift.Type.STRING, 1);
    output.writeString(this.params);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var QueryThriftService_findCateCondListService_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
QueryThriftService_findCateCondListService_result.prototype = {};
QueryThriftService_findCateCondListService_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

QueryThriftService_findCateCondListService_result.prototype.write = function(output) {
  output.writeStructBegin('QueryThriftService_findCateCondListService_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var QueryThriftService_findCondListService_args = function(args) {
  this.params = null;
  if (args) {
    if (args.params !== undefined) {
      this.params = args.params;
    }
  }
};
QueryThriftService_findCondListService_args.prototype = {};
QueryThriftService_findCondListService_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.params = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

QueryThriftService_findCondListService_args.prototype.write = function(output) {
  output.writeStructBegin('QueryThriftService_findCondListService_args');
  if (this.params) {
    output.writeFieldBegin('params', Thrift.Type.STRING, 1);
    output.writeString(this.params);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var QueryThriftService_findCondListService_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
QueryThriftService_findCondListService_result.prototype = {};
QueryThriftService_findCondListService_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

QueryThriftService_findCondListService_result.prototype.write = function(output) {
  output.writeStructBegin('QueryThriftService_findCondListService_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var QueryThriftService_findOnePoi2Service_args = function(args) {
  this.params = null;
  if (args) {
    if (args.params !== undefined) {
      this.params = args.params;
    }
  }
};
QueryThriftService_findOnePoi2Service_args.prototype = {};
QueryThriftService_findOnePoi2Service_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.params = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

QueryThriftService_findOnePoi2Service_args.prototype.write = function(output) {
  output.writeStructBegin('QueryThriftService_findOnePoi2Service_args');
  if (this.params) {
    output.writeFieldBegin('params', Thrift.Type.STRING, 1);
    output.writeString(this.params);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var QueryThriftService_findOnePoi2Service_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
QueryThriftService_findOnePoi2Service_result.prototype = {};
QueryThriftService_findOnePoi2Service_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

QueryThriftService_findOnePoi2Service_result.prototype.write = function(output) {
  output.writeStructBegin('QueryThriftService_findOnePoi2Service_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var QueryThriftService_findKeywordListService_args = function(args) {
  this.params = null;
  if (args) {
    if (args.params !== undefined) {
      this.params = args.params;
    }
  }
};
QueryThriftService_findKeywordListService_args.prototype = {};
QueryThriftService_findKeywordListService_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.params = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

QueryThriftService_findKeywordListService_args.prototype.write = function(output) {
  output.writeStructBegin('QueryThriftService_findKeywordListService_args');
  if (this.params) {
    output.writeFieldBegin('params', Thrift.Type.STRING, 1);
    output.writeString(this.params);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var QueryThriftService_findKeywordListService_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
QueryThriftService_findKeywordListService_result.prototype = {};
QueryThriftService_findKeywordListService_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

QueryThriftService_findKeywordListService_result.prototype.write = function(output) {
  output.writeStructBegin('QueryThriftService_findKeywordListService_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var QueryThriftServiceClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this.seqid = 0;
    this._reqs = {};
};
QueryThriftServiceClient.prototype = {};
QueryThriftServiceClient.prototype.findCateCondListService = function(params, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_findCateCondListService(params);
};

QueryThriftServiceClient.prototype.send_findCateCondListService = function(params) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('findCateCondListService', Thrift.MessageType.CALL, this.seqid);
  var args = new QueryThriftService_findCateCondListService_args();
  args.params = params;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

QueryThriftServiceClient.prototype.recv_findCateCondListService = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new QueryThriftService_findCateCondListService_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('findCateCondListService failed: unknown result');
};
QueryThriftServiceClient.prototype.findCondListService = function(params, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_findCondListService(params);
};

QueryThriftServiceClient.prototype.send_findCondListService = function(params) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('findCondListService', Thrift.MessageType.CALL, this.seqid);
  var args = new QueryThriftService_findCondListService_args();
  args.params = params;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

QueryThriftServiceClient.prototype.recv_findCondListService = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new QueryThriftService_findCondListService_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('findCondListService failed: unknown result');
};
QueryThriftServiceClient.prototype.findOnePoi2Service = function(params, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_findOnePoi2Service(params);
};

QueryThriftServiceClient.prototype.send_findOnePoi2Service = function(params) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('findOnePoi2Service', Thrift.MessageType.CALL, this.seqid);
  var args = new QueryThriftService_findOnePoi2Service_args();
  args.params = params;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

QueryThriftServiceClient.prototype.recv_findOnePoi2Service = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new QueryThriftService_findOnePoi2Service_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('findOnePoi2Service failed: unknown result');
};
QueryThriftServiceClient.prototype.findKeywordListService = function(params, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_findKeywordListService(params);
};

QueryThriftServiceClient.prototype.send_findKeywordListService = function(params) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('findKeywordListService', Thrift.MessageType.CALL, this.seqid);
  var args = new QueryThriftService_findKeywordListService_args();
  args.params = params;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

QueryThriftServiceClient.prototype.recv_findKeywordListService = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new QueryThriftService_findKeywordListService_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('findKeywordListService failed: unknown result');
};
var QueryThriftServiceProcessor = exports.Processor = function(handler) {
  this._handler = handler
}
QueryThriftServiceProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.Exception, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
}

QueryThriftServiceProcessor.prototype.process_findCateCondListService = function(seqid, input, output) {
  var args = new QueryThriftService_findCateCondListService_args();
  args.read(input);
  input.readMessageEnd();
  var result = new QueryThriftService_findCateCondListService_result();
  this._handler.findCateCondListService(args.params, function (success) {
    result.success = success;
    output.writeMessageBegin("findCateCondListService", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

QueryThriftServiceProcessor.prototype.process_findCondListService = function(seqid, input, output) {
  var args = new QueryThriftService_findCondListService_args();
  args.read(input);
  input.readMessageEnd();
  var result = new QueryThriftService_findCondListService_result();
  this._handler.findCondListService(args.params, function (success) {
    result.success = success;
    output.writeMessageBegin("findCondListService", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

QueryThriftServiceProcessor.prototype.process_findOnePoi2Service = function(seqid, input, output) {
  var args = new QueryThriftService_findOnePoi2Service_args();
  args.read(input);
  input.readMessageEnd();
  var result = new QueryThriftService_findOnePoi2Service_result();
  this._handler.findOnePoi2Service(args.params, function (success) {
    result.success = success;
    output.writeMessageBegin("findOnePoi2Service", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

QueryThriftServiceProcessor.prototype.process_findKeywordListService = function(seqid, input, output) {
  var args = new QueryThriftService_findKeywordListService_args();
  args.read(input);
  input.readMessageEnd();
  var result = new QueryThriftService_findKeywordListService_result();
  this._handler.findKeywordListService(args.params, function (success) {
    result.success = success;
    output.writeMessageBegin("findKeywordListService", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

